/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnautherizedRouteImport } from './routes/_unautherized'
import { Route as AutherizedRouteImport } from './routes/_autherized'
import { Route as AutherizedIndexRouteImport } from './routes/_autherized/index'
import { Route as UnautherizedRegisterRouteImport } from './routes/_unautherized/register'
import { Route as UnautherizedLoginRouteImport } from './routes/_unautherized/login'
import { Route as AutherizedUsersRouteImport } from './routes/_autherized/users'
import { Route as AutherizedSettingsRouteImport } from './routes/_autherized/settings'
import { Route as AutherizedFeedsRouteImport } from './routes/_autherized/feeds'
import { Route as AutherizedChatRouteImport } from './routes/_autherized/_chat'
import { Route as AutherizedChatChatsRouteImport } from './routes/_autherized/_chat/chats'
import { Route as AutherizedChatChannelsRouteImport } from './routes/_autherized/_chat/channels'
import { Route as AutherizedChatChatsIdRouteImport } from './routes/_autherized/_chat/chats/$id'
import { Route as AutherizedChatChannelsIdRouteImport } from './routes/_autherized/_chat/channels/$id'

const UnautherizedRoute = UnautherizedRouteImport.update({
  id: '/_unautherized',
  getParentRoute: () => rootRouteImport,
} as any)
const AutherizedRoute = AutherizedRouteImport.update({
  id: '/_autherized',
  getParentRoute: () => rootRouteImport,
} as any)
const AutherizedIndexRoute = AutherizedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AutherizedRoute,
} as any)
const UnautherizedRegisterRoute = UnautherizedRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => UnautherizedRoute,
} as any)
const UnautherizedLoginRoute = UnautherizedLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => UnautherizedRoute,
} as any)
const AutherizedUsersRoute = AutherizedUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AutherizedRoute,
} as any)
const AutherizedSettingsRoute = AutherizedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AutherizedRoute,
} as any)
const AutherizedFeedsRoute = AutherizedFeedsRouteImport.update({
  id: '/feeds',
  path: '/feeds',
  getParentRoute: () => AutherizedRoute,
} as any)
const AutherizedChatRoute = AutherizedChatRouteImport.update({
  id: '/_chat',
  getParentRoute: () => AutherizedRoute,
} as any)
const AutherizedChatChatsRoute = AutherizedChatChatsRouteImport.update({
  id: '/chats',
  path: '/chats',
  getParentRoute: () => AutherizedChatRoute,
} as any)
const AutherizedChatChannelsRoute = AutherizedChatChannelsRouteImport.update({
  id: '/channels',
  path: '/channels',
  getParentRoute: () => AutherizedChatRoute,
} as any)
const AutherizedChatChatsIdRoute = AutherizedChatChatsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AutherizedChatChatsRoute,
} as any)
const AutherizedChatChannelsIdRoute =
  AutherizedChatChannelsIdRouteImport.update({
    id: '/$id',
    path: '/$id',
    getParentRoute: () => AutherizedChatChannelsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/feeds': typeof AutherizedFeedsRoute
  '/settings': typeof AutherizedSettingsRoute
  '/users': typeof AutherizedUsersRoute
  '/login': typeof UnautherizedLoginRoute
  '/register': typeof UnautherizedRegisterRoute
  '/': typeof AutherizedIndexRoute
  '/channels': typeof AutherizedChatChannelsRouteWithChildren
  '/chats': typeof AutherizedChatChatsRouteWithChildren
  '/channels/$id': typeof AutherizedChatChannelsIdRoute
  '/chats/$id': typeof AutherizedChatChatsIdRoute
}
export interface FileRoutesByTo {
  '/feeds': typeof AutherizedFeedsRoute
  '/settings': typeof AutherizedSettingsRoute
  '/users': typeof AutherizedUsersRoute
  '/login': typeof UnautherizedLoginRoute
  '/register': typeof UnautherizedRegisterRoute
  '/': typeof AutherizedIndexRoute
  '/channels': typeof AutherizedChatChannelsRouteWithChildren
  '/chats': typeof AutherizedChatChatsRouteWithChildren
  '/channels/$id': typeof AutherizedChatChannelsIdRoute
  '/chats/$id': typeof AutherizedChatChatsIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_autherized': typeof AutherizedRouteWithChildren
  '/_unautherized': typeof UnautherizedRouteWithChildren
  '/_autherized/_chat': typeof AutherizedChatRouteWithChildren
  '/_autherized/feeds': typeof AutherizedFeedsRoute
  '/_autherized/settings': typeof AutherizedSettingsRoute
  '/_autherized/users': typeof AutherizedUsersRoute
  '/_unautherized/login': typeof UnautherizedLoginRoute
  '/_unautherized/register': typeof UnautherizedRegisterRoute
  '/_autherized/': typeof AutherizedIndexRoute
  '/_autherized/_chat/channels': typeof AutherizedChatChannelsRouteWithChildren
  '/_autherized/_chat/chats': typeof AutherizedChatChatsRouteWithChildren
  '/_autherized/_chat/channels/$id': typeof AutherizedChatChannelsIdRoute
  '/_autherized/_chat/chats/$id': typeof AutherizedChatChatsIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/feeds'
    | '/settings'
    | '/users'
    | '/login'
    | '/register'
    | '/'
    | '/channels'
    | '/chats'
    | '/channels/$id'
    | '/chats/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/feeds'
    | '/settings'
    | '/users'
    | '/login'
    | '/register'
    | '/'
    | '/channels'
    | '/chats'
    | '/channels/$id'
    | '/chats/$id'
  id:
    | '__root__'
    | '/_autherized'
    | '/_unautherized'
    | '/_autherized/_chat'
    | '/_autherized/feeds'
    | '/_autherized/settings'
    | '/_autherized/users'
    | '/_unautherized/login'
    | '/_unautherized/register'
    | '/_autherized/'
    | '/_autherized/_chat/channels'
    | '/_autherized/_chat/chats'
    | '/_autherized/_chat/channels/$id'
    | '/_autherized/_chat/chats/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AutherizedRoute: typeof AutherizedRouteWithChildren
  UnautherizedRoute: typeof UnautherizedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_unautherized': {
      id: '/_unautherized'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UnautherizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_autherized': {
      id: '/_autherized'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AutherizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_autherized/': {
      id: '/_autherized/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AutherizedIndexRouteImport
      parentRoute: typeof AutherizedRoute
    }
    '/_unautherized/register': {
      id: '/_unautherized/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof UnautherizedRegisterRouteImport
      parentRoute: typeof UnautherizedRoute
    }
    '/_unautherized/login': {
      id: '/_unautherized/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof UnautherizedLoginRouteImport
      parentRoute: typeof UnautherizedRoute
    }
    '/_autherized/users': {
      id: '/_autherized/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AutherizedUsersRouteImport
      parentRoute: typeof AutherizedRoute
    }
    '/_autherized/settings': {
      id: '/_autherized/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AutherizedSettingsRouteImport
      parentRoute: typeof AutherizedRoute
    }
    '/_autherized/feeds': {
      id: '/_autherized/feeds'
      path: '/feeds'
      fullPath: '/feeds'
      preLoaderRoute: typeof AutherizedFeedsRouteImport
      parentRoute: typeof AutherizedRoute
    }
    '/_autherized/_chat': {
      id: '/_autherized/_chat'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AutherizedChatRouteImport
      parentRoute: typeof AutherizedRoute
    }
    '/_autherized/_chat/chats': {
      id: '/_autherized/_chat/chats'
      path: '/chats'
      fullPath: '/chats'
      preLoaderRoute: typeof AutherizedChatChatsRouteImport
      parentRoute: typeof AutherizedChatRoute
    }
    '/_autherized/_chat/channels': {
      id: '/_autherized/_chat/channels'
      path: '/channels'
      fullPath: '/channels'
      preLoaderRoute: typeof AutherizedChatChannelsRouteImport
      parentRoute: typeof AutherizedChatRoute
    }
    '/_autherized/_chat/chats/$id': {
      id: '/_autherized/_chat/chats/$id'
      path: '/$id'
      fullPath: '/chats/$id'
      preLoaderRoute: typeof AutherizedChatChatsIdRouteImport
      parentRoute: typeof AutherizedChatChatsRoute
    }
    '/_autherized/_chat/channels/$id': {
      id: '/_autherized/_chat/channels/$id'
      path: '/$id'
      fullPath: '/channels/$id'
      preLoaderRoute: typeof AutherizedChatChannelsIdRouteImport
      parentRoute: typeof AutherizedChatChannelsRoute
    }
  }
}

interface AutherizedChatChannelsRouteChildren {
  AutherizedChatChannelsIdRoute: typeof AutherizedChatChannelsIdRoute
}

const AutherizedChatChannelsRouteChildren: AutherizedChatChannelsRouteChildren =
  {
    AutherizedChatChannelsIdRoute: AutherizedChatChannelsIdRoute,
  }

const AutherizedChatChannelsRouteWithChildren =
  AutherizedChatChannelsRoute._addFileChildren(
    AutherizedChatChannelsRouteChildren,
  )

interface AutherizedChatChatsRouteChildren {
  AutherizedChatChatsIdRoute: typeof AutherizedChatChatsIdRoute
}

const AutherizedChatChatsRouteChildren: AutherizedChatChatsRouteChildren = {
  AutherizedChatChatsIdRoute: AutherizedChatChatsIdRoute,
}

const AutherizedChatChatsRouteWithChildren =
  AutherizedChatChatsRoute._addFileChildren(AutherizedChatChatsRouteChildren)

interface AutherizedChatRouteChildren {
  AutherizedChatChannelsRoute: typeof AutherizedChatChannelsRouteWithChildren
  AutherizedChatChatsRoute: typeof AutherizedChatChatsRouteWithChildren
}

const AutherizedChatRouteChildren: AutherizedChatRouteChildren = {
  AutherizedChatChannelsRoute: AutherizedChatChannelsRouteWithChildren,
  AutherizedChatChatsRoute: AutherizedChatChatsRouteWithChildren,
}

const AutherizedChatRouteWithChildren = AutherizedChatRoute._addFileChildren(
  AutherizedChatRouteChildren,
)

interface AutherizedRouteChildren {
  AutherizedChatRoute: typeof AutherizedChatRouteWithChildren
  AutherizedFeedsRoute: typeof AutherizedFeedsRoute
  AutherizedSettingsRoute: typeof AutherizedSettingsRoute
  AutherizedUsersRoute: typeof AutherizedUsersRoute
  AutherizedIndexRoute: typeof AutherizedIndexRoute
}

const AutherizedRouteChildren: AutherizedRouteChildren = {
  AutherizedChatRoute: AutherizedChatRouteWithChildren,
  AutherizedFeedsRoute: AutherizedFeedsRoute,
  AutherizedSettingsRoute: AutherizedSettingsRoute,
  AutherizedUsersRoute: AutherizedUsersRoute,
  AutherizedIndexRoute: AutherizedIndexRoute,
}

const AutherizedRouteWithChildren = AutherizedRoute._addFileChildren(
  AutherizedRouteChildren,
)

interface UnautherizedRouteChildren {
  UnautherizedLoginRoute: typeof UnautherizedLoginRoute
  UnautherizedRegisterRoute: typeof UnautherizedRegisterRoute
}

const UnautherizedRouteChildren: UnautherizedRouteChildren = {
  UnautherizedLoginRoute: UnautherizedLoginRoute,
  UnautherizedRegisterRoute: UnautherizedRegisterRoute,
}

const UnautherizedRouteWithChildren = UnautherizedRoute._addFileChildren(
  UnautherizedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AutherizedRoute: AutherizedRouteWithChildren,
  UnautherizedRoute: UnautherizedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
